[
  {
    "name": "Form#sanitize",
    "filePath": "src/Form.js",
    "lines": [
      {
        "lineNumber": 223,
        "line": "  /**"
      },
      {
        "lineNumber": 224,
        "line": "   * Sanitize an html string."
      },
      {
        "lineNumber": 225,
        "line": "   *"
      },
      {
        "lineNumber": 226,
        "line": "   * @param string"
      },
      {
        "lineNumber": 227,
        "line": "   * @returns {*}"
      },
      {
        "lineNumber": 228,
        "line": "   */"
      },
      {
        "lineNumber": 229,
        "line": "  sanitize(dirty, forceSanitize) {"
      }
    ],
    "codeParams": [
      "dirty",
      "forceSanitize"
    ],
    "docParams": [
      "string"
    ]
  },
  {
    "name": "checkInvalidDate",
    "filePath": "src/utils/calendarUtils.js",
    "lines": [
      {
        "lineNumber": 71,
        "line": "/**"
      },
      {
        "lineNumber": 72,
        "line": " * Checks the entered date for validity."
      },
      {
        "lineNumber": 73,
        "line": " *"
      },
      {
        "lineNumber": 74,
        "line": " * @param {String} value"
      },
      {
        "lineNumber": 75,
        "line": " *   The value to check."
      },
      {
        "lineNumber": 76,
        "line": " * @param {[String]} format"
      },
      {
        "lineNumber": 77,
        "line": " *   A moment formats."
      },
      {
        "lineNumber": 78,
        "line": " * @param {Date} maxDate"
      },
      {
        "lineNumber": 79,
        "line": " *   The max date."
      },
      {
        "lineNumber": 80,
        "line": " * @param {Date} minDate"
      },
      {
        "lineNumber": 81,
        "line": " *   The min date."
      },
      {
        "lineNumber": 82,
        "line": " * * @return {{message: string, result: boolean}}"
      },
      {
        "lineNumber": 83,
        "line": " */"
      },
      {
        "lineNumber": 84,
        "line": "export function checkInvalidDate(value, format, minDate, maxDate) {"
      }
    ],
    "codeParams": [
      "value",
      "format",
      "minDate",
      "maxDate"
    ],
    "docParams": [
      "value",
      "format",
      "maxDate",
      "minDate"
    ]
  },
  {
    "name": "eachComponent",
    "filePath": "src/utils/formUtils.js",
    "lines": [
      {
        "lineNumber": 32,
        "line": "/**"
      },
      {
        "lineNumber": 33,
        "line": " * Iterate through each component within a form."
      },
      {
        "lineNumber": 34,
        "line": " *"
      },
      {
        "lineNumber": 35,
        "line": " * @param {Object} components"
      },
      {
        "lineNumber": 36,
        "line": " *   The components to iterate."
      },
      {
        "lineNumber": 37,
        "line": " * @param {Function} fn"
      },
      {
        "lineNumber": 38,
        "line": " *   The iteration function to invoke for each component."
      },
      {
        "lineNumber": 39,
        "line": " * @param {Boolean} includeAll"
      },
      {
        "lineNumber": 40,
        "line": " *   Whether or not to include layout components."
      },
      {
        "lineNumber": 41,
        "line": " * @param {String} path"
      },
      {
        "lineNumber": 42,
        "line": " *   The current data path of the element. Example: data.user.firstName"
      },
      {
        "lineNumber": 43,
        "line": " * @param {Object} parent"
      },
      {
        "lineNumber": 44,
        "line": " *   The parent object."
      },
      {
        "lineNumber": 45,
        "line": " */"
      },
      {
        "lineNumber": 46,
        "line": "export function eachComponent(components, fn, includeAll, path, parent, inRecursion) {"
      }
    ],
    "codeParams": [
      "components",
      "fn",
      "includeAll",
      "path",
      "parent",
      "inRecursion"
    ],
    "docParams": [
      "components",
      "fn",
      "includeAll",
      "path",
      "parent"
    ]
  },
  {
    "name": "getComponent",
    "filePath": "src/utils/formUtils.js",
    "lines": [
      {
        "lineNumber": 151,
        "line": "/**"
      },
      {
        "lineNumber": 152,
        "line": " * Get a component by its key"
      },
      {
        "lineNumber": 153,
        "line": " *"
      },
      {
        "lineNumber": 154,
        "line": " * @param {Object} components"
      },
      {
        "lineNumber": 155,
        "line": " *   The components to iterate."
      },
      {
        "lineNumber": 156,
        "line": " * @param {String|Object} key"
      },
      {
        "lineNumber": 157,
        "line": " *   The key of the component to get, or a query of the component to search."
      },
      {
        "lineNumber": 158,
        "line": " *"
      },
      {
        "lineNumber": 159,
        "line": " * @returns {Object}"
      },
      {
        "lineNumber": 160,
        "line": " *   The component that matches the given key, or undefined if not found."
      },
      {
        "lineNumber": 161,
        "line": " */"
      },
      {
        "lineNumber": 162,
        "line": "export function getComponent(components, key, includeAll) {"
      }
    ],
    "codeParams": [
      "components",
      "key",
      "includeAll"
    ],
    "docParams": [
      "components",
      "key"
    ]
  },
  {
    "name": "findComponent",
    "filePath": "src/utils/formUtils.js",
    "lines": [
      {
        "lineNumber": 202,
        "line": "/**"
      },
      {
        "lineNumber": 203,
        "line": " * This function will find a component in a form and return the component AND THE PATH to the component in the form."
      },
      {
        "lineNumber": 204,
        "line": " * Path to the component is stored as an array of nested components and their indexes.The Path is being filled recursively"
      },
      {
        "lineNumber": 205,
        "line": " * when you iterating through the nested structure."
      },
      {
        "lineNumber": 206,
        "line": " * If the component is not found the callback won't be called and function won't return anything."
      },
      {
        "lineNumber": 207,
        "line": " *"
      },
      {
        "lineNumber": 208,
        "line": " * @param components"
      },
      {
        "lineNumber": 209,
        "line": " * @param key"
      },
      {
        "lineNumber": 210,
        "line": " * @param fn"
      },
      {
        "lineNumber": 211,
        "line": " * @param path"
      },
      {
        "lineNumber": 212,
        "line": " * @returns {*}"
      },
      {
        "lineNumber": 213,
        "line": " */"
      },
      {
        "lineNumber": 214,
        "line": "export function findComponent(components, key, path, fn) {"
      }
    ],
    "codeParams": [
      "components",
      "key",
      "path",
      "fn"
    ],
    "docParams": [
      "components",
      "key",
      "fn",
      "path"
    ]
  }
]