[
  {
    "name": "Form#sanitize",
    "filePath": "src/Form.js",
    "lines": [
      {
        "lineNumber": 219,
        "line": "  /**"
      },
      {
        "lineNumber": 220,
        "line": "   * Sanitize an html string."
      },
      {
        "lineNumber": 221,
        "line": "   *"
      },
      {
        "lineNumber": 222,
        "line": "   * @param string"
      },
      {
        "lineNumber": 223,
        "line": "   * @returns {*}"
      },
      {
        "lineNumber": 224,
        "line": "   */"
      },
      {
        "lineNumber": 225,
        "line": "  sanitize(dirty) {"
      }
    ],
    "codeParams": [
      "dirty"
    ],
    "docParams": [
      "string"
    ]
  },
  {
    "name": "Webform#restoreDraft",
    "filePath": "src/Webform.js",
    "lines": [
      {
        "lineNumber": 749,
        "line": "  /**"
      },
      {
        "lineNumber": 750,
        "line": "   * Restores a draft submission based on the user who is authenticated."
      },
      {
        "lineNumber": 751,
        "line": "   *"
      },
      {
        "lineNumber": 752,
        "line": "   * @param {userId} - The user id where we need to restore the draft from."
      },
      {
        "lineNumber": 753,
        "line": "   */"
      },
      {
        "lineNumber": 754,
        "line": "  restoreDraft(userId) {"
      }
    ],
    "codeParams": [
      "userId"
    ],
    "docParams": [
      "-"
    ]
  },
  {
    "name": "Webform#showErrors",
    "filePath": "src/Webform.js",
    "lines": [
      {
        "lineNumber": 1059,
        "line": "  /**"
      },
      {
        "lineNumber": 1060,
        "line": "   * Show the errors of this form within the alert dialog."
      },
      {
        "lineNumber": 1061,
        "line": "   *"
      },
      {
        "lineNumber": 1062,
        "line": "   * @param {Object} error - An optional additional error to display along with the component errors."
      },
      {
        "lineNumber": 1063,
        "line": "   * @returns {*}"
      },
      {
        "lineNumber": 1064,
        "line": "   */"
      },
      {
        "lineNumber": 1065,
        "line": "  showErrors(error, triggerEvent) {"
      }
    ],
    "codeParams": [
      "error",
      "triggerEvent"
    ],
    "docParams": [
      "error"
    ]
  },
  {
    "name": "Webform#onChange",
    "filePath": "src/Webform.js",
    "lines": [
      {
        "lineNumber": 1205,
        "line": "  /**"
      },
      {
        "lineNumber": 1206,
        "line": "   * Trigger the change event for this form."
      },
      {
        "lineNumber": 1207,
        "line": "   *"
      },
      {
        "lineNumber": 1208,
        "line": "   * @param changed"
      },
      {
        "lineNumber": 1209,
        "line": "   * @param flags"
      },
      {
        "lineNumber": 1210,
        "line": "   */"
      },
      {
        "lineNumber": 1211,
        "line": "  onChange(flags, changed, modified) {"
      }
    ],
    "codeParams": [
      "flags",
      "changed",
      "modified"
    ],
    "docParams": [
      "changed",
      "flags"
    ]
  },
  {
    "name": "Webform#submit",
    "filePath": "src/Webform.js",
    "lines": [
      {
        "lineNumber": 1389,
        "line": "  /**"
      },
      {
        "lineNumber": 1390,
        "line": "   * Submits the form."
      },
      {
        "lineNumber": 1391,
        "line": "   *"
      },
      {
        "lineNumber": 1392,
        "line": "   * @example"
      },
      {
        "lineNumber": 1393,
        "line": "   * import Webform from 'formiojs/Webform';"
      },
      {
        "lineNumber": 1394,
        "line": "   * let form = new Webform(document.getElementById('formio'));"
      },
      {
        "lineNumber": 1395,
        "line": "   * form.src = 'https://examples.form.io/example';"
      },
      {
        "lineNumber": 1396,
        "line": "   * form.submission = {data: {"
      },
      {
        "lineNumber": 1397,
        "line": "   *   firstName: 'Joe',"
      },
      {
        "lineNumber": 1398,
        "line": "   *   lastName: 'Smith',"
      },
      {
        "lineNumber": 1399,
        "line": "   *   email: 'joe@example.com'"
      },
      {
        "lineNumber": 1400,
        "line": "   * }};"
      },
      {
        "lineNumber": 1401,
        "line": "   * form.submit().then((submission) => {"
      },
      {
        "lineNumber": 1402,
        "line": "   *   console.log(submission);"
      },
      {
        "lineNumber": 1403,
        "line": "   * });"
      },
      {
        "lineNumber": 1404,
        "line": "   *"
      },
      {
        "lineNumber": 1405,
        "line": "   * @param {boolean} before - If this submission occured from the before handlers."
      },
      {
        "lineNumber": 1406,
        "line": "   *"
      },
      {
        "lineNumber": 1407,
        "line": "   * @returns {Promise} - A promise when the form is done submitting."
      },
      {
        "lineNumber": 1408,
        "line": "   */"
      },
      {
        "lineNumber": 1409,
        "line": "  submit(before, options) {"
      }
    ],
    "codeParams": [
      "before",
      "options"
    ],
    "docParams": [
      "before"
    ]
  },
  {
    "name": "WebformBuilder#saveComponent",
    "filePath": "src/WebformBuilder.js",
    "lines": [
      {
        "lineNumber": 988,
        "line": "  /**"
      },
      {
        "lineNumber": 989,
        "line": "   * Called when a new component is saved."
      },
      {
        "lineNumber": 990,
        "line": "   *"
      },
      {
        "lineNumber": 991,
        "line": "   * @param parent"
      },
      {
        "lineNumber": 992,
        "line": "   * @param component"
      },
      {
        "lineNumber": 993,
        "line": "   * @return {boolean}"
      },
      {
        "lineNumber": 994,
        "line": "   */"
      },
      {
        "lineNumber": 995,
        "line": "  saveComponent(component, parent, isNew, original) {"
      }
    ],
    "codeParams": [
      "component",
      "parent",
      "isNew",
      "original"
    ],
    "docParams": [
      "parent",
      "component"
    ]
  },
  {
    "name": "Component#getModifiedSchema",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 571,
        "line": "  /**"
      },
      {
        "lineNumber": 572,
        "line": "   * Returns only the schema that is different from the default."
      },
      {
        "lineNumber": 573,
        "line": "   *"
      },
      {
        "lineNumber": 574,
        "line": "   * @param schema"
      },
      {
        "lineNumber": 575,
        "line": "   * @param defaultSchema"
      },
      {
        "lineNumber": 576,
        "line": "   */"
      },
      {
        "lineNumber": 577,
        "line": "  getModifiedSchema(schema, defaultSchema, recursion) {"
      }
    ],
    "codeParams": [
      "schema",
      "defaultSchema",
      "recursion"
    ],
    "docParams": [
      "schema",
      "defaultSchema"
    ]
  },
  {
    "name": "Component#sanitize",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 757,
        "line": "  /**"
      },
      {
        "lineNumber": 758,
        "line": "   * Sanitize an html string."
      },
      {
        "lineNumber": 759,
        "line": "   *"
      },
      {
        "lineNumber": 760,
        "line": "   * @param string"
      },
      {
        "lineNumber": 761,
        "line": "   * @returns {*}"
      },
      {
        "lineNumber": 762,
        "line": "   */"
      },
      {
        "lineNumber": 763,
        "line": "  sanitize(dirty) {"
      }
    ],
    "codeParams": [
      "dirty"
    ],
    "docParams": [
      "string"
    ]
  },
  {
    "name": "Component#renderString",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 767,
        "line": "  /**"
      },
      {
        "lineNumber": 768,
        "line": "   * Render a template string into html."
      },
      {
        "lineNumber": 769,
        "line": "   *"
      },
      {
        "lineNumber": 770,
        "line": "   * @param template"
      },
      {
        "lineNumber": 771,
        "line": "   * @param data"
      },
      {
        "lineNumber": 772,
        "line": "   * @param actions"
      },
      {
        "lineNumber": 773,
        "line": "   *"
      },
      {
        "lineNumber": 774,
        "line": "   * @return {HTMLElement} - The created element."
      },
      {
        "lineNumber": 775,
        "line": "   */"
      },
      {
        "lineNumber": 776,
        "line": "  renderString(template, data) {"
      }
    ],
    "codeParams": [
      "template",
      "data"
    ],
    "docParams": [
      "template",
      "data",
      "actions"
    ]
  },
  {
    "name": "Component#conditionallyVisible",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 1396,
        "line": "  /**"
      },
      {
        "lineNumber": 1397,
        "line": "   * Check if this component is conditionally visible."
      },
      {
        "lineNumber": 1398,
        "line": "   *"
      },
      {
        "lineNumber": 1399,
        "line": "   * @param data"
      },
      {
        "lineNumber": 1400,
        "line": "   * @return {boolean}"
      },
      {
        "lineNumber": 1401,
        "line": "   */"
      },
      {
        "lineNumber": 1402,
        "line": "  conditionallyVisible(data, row) {"
      }
    ],
    "codeParams": [
      "data",
      "row"
    ],
    "docParams": [
      "data"
    ]
  },
  {
    "name": "Component#checkConditions",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 1453,
        "line": "  /**"
      },
      {
        "lineNumber": 1454,
        "line": "   * Checks conditions for this component and any sub components."
      },
      {
        "lineNumber": 1455,
        "line": "   * @param args"
      },
      {
        "lineNumber": 1456,
        "line": "   * @return {boolean}"
      },
      {
        "lineNumber": 1457,
        "line": "   */"
      },
      {
        "lineNumber": 1458,
        "line": "  checkConditions(data, flags, row) {"
      }
    ],
    "codeParams": [
      "data",
      "flags",
      "row"
    ],
    "docParams": [
      "args"
    ]
  },
  {
    "name": "Component#fieldLogic",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 1469,
        "line": "  /**"
      },
      {
        "lineNumber": 1470,
        "line": "   * Check all triggers and apply necessary actions."
      },
      {
        "lineNumber": 1471,
        "line": "   *"
      },
      {
        "lineNumber": 1472,
        "line": "   * @param data"
      },
      {
        "lineNumber": 1473,
        "line": "   */"
      },
      {
        "lineNumber": 1474,
        "line": "  fieldLogic(data, row) {"
      }
    ],
    "codeParams": [
      "data",
      "row"
    ],
    "docParams": [
      "data"
    ]
  },
  {
    "name": "Component#addMessages",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 1616,
        "line": "  /**"
      },
      {
        "lineNumber": 1617,
        "line": "   * Add a new input error to this element."
      },
      {
        "lineNumber": 1618,
        "line": "   *"
      },
      {
        "lineNumber": 1619,
        "line": "   * @param message"
      },
      {
        "lineNumber": 1620,
        "line": "   * @param dirty"
      },
      {
        "lineNumber": 1621,
        "line": "   */"
      },
      {
        "lineNumber": 1622,
        "line": "  addMessages(messages) {"
      }
    ],
    "codeParams": [
      "messages"
    ],
    "docParams": [
      "message",
      "dirty"
    ]
  },
  {
    "name": "Component#setValueAt",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 2078,
        "line": "  /**"
      },
      {
        "lineNumber": 2079,
        "line": "   * Set the value at a specific index."
      },
      {
        "lineNumber": 2080,
        "line": "   *"
      },
      {
        "lineNumber": 2081,
        "line": "   * @param index"
      },
      {
        "lineNumber": 2082,
        "line": "   * @param value"
      },
      {
        "lineNumber": 2083,
        "line": "   */"
      },
      {
        "lineNumber": 2084,
        "line": "  setValueAt(index, value, flags) {"
      }
    ],
    "codeParams": [
      "index",
      "value",
      "flags"
    ],
    "docParams": [
      "index",
      "value"
    ]
  },
  {
    "name": "Component#updateComponentValue",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 2141,
        "line": "  /**"
      },
      {
        "lineNumber": 2142,
        "line": "   * Update a value of this component."
      },
      {
        "lineNumber": 2143,
        "line": "   *"
      },
      {
        "lineNumber": 2144,
        "line": "   * @param flags"
      },
      {
        "lineNumber": 2145,
        "line": "   */"
      },
      {
        "lineNumber": 2146,
        "line": "  updateComponentValue(value, flags) {"
      }
    ],
    "codeParams": [
      "value",
      "flags"
    ],
    "docParams": [
      "flags"
    ]
  },
  {
    "name": "Component#calculateComponentValue",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 2220,
        "line": "  /**"
      },
      {
        "lineNumber": 2221,
        "line": "   * Perform a calculated value operation."
      },
      {
        "lineNumber": 2222,
        "line": "   *"
      },
      {
        "lineNumber": 2223,
        "line": "   * @param data - The global data object."
      },
      {
        "lineNumber": 2224,
        "line": "   *"
      },
      {
        "lineNumber": 2225,
        "line": "   * @return {boolean} - If the value changed during calculation."
      },
      {
        "lineNumber": 2226,
        "line": "   */"
      },
      {
        "lineNumber": 2227,
        "line": "  calculateComponentValue(data, flags, row) {"
      }
    ],
    "codeParams": [
      "data",
      "flags",
      "row"
    ],
    "docParams": [
      "data"
    ]
  },
  {
    "name": "Component#calculateValue",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 2285,
        "line": "  /**"
      },
      {
        "lineNumber": 2286,
        "line": "   * Performs calculations in this component plus any child components."
      },
      {
        "lineNumber": 2287,
        "line": "   *"
      },
      {
        "lineNumber": 2288,
        "line": "   * @param args"
      },
      {
        "lineNumber": 2289,
        "line": "   * @return {boolean}"
      },
      {
        "lineNumber": 2290,
        "line": "   */"
      },
      {
        "lineNumber": 2291,
        "line": "  calculateValue(data, flags, row) {"
      }
    ],
    "codeParams": [
      "data",
      "flags",
      "row"
    ],
    "docParams": [
      "args"
    ]
  },
  {
    "name": "Component#invalidMessage",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 2326,
        "line": "  /**"
      },
      {
        "lineNumber": 2327,
        "line": "   * Returns the invalid message, or empty string if the component is valid."
      },
      {
        "lineNumber": 2328,
        "line": "   *"
      },
      {
        "lineNumber": 2329,
        "line": "   * @param data"
      },
      {
        "lineNumber": 2330,
        "line": "   * @param dirty"
      },
      {
        "lineNumber": 2331,
        "line": "   * @return {*}"
      },
      {
        "lineNumber": 2332,
        "line": "   */"
      },
      {
        "lineNumber": 2333,
        "line": "  invalidMessage(data, dirty, ignoreCondition, row) {"
      }
    ],
    "codeParams": [
      "data",
      "dirty",
      "ignoreCondition",
      "row"
    ],
    "docParams": [
      "data",
      "dirty"
    ]
  },
  {
    "name": "Component#checkData",
    "filePath": "src/components/_classes/component/Component.js",
    "lines": [
      {
        "lineNumber": 2393,
        "line": "  /**"
      },
      {
        "lineNumber": 2394,
        "line": "   * Check the conditions, calculations, and validity of a single component and triggers an update if"
      },
      {
        "lineNumber": 2395,
        "line": "   * something changed."
      },
      {
        "lineNumber": 2396,
        "line": "   *"
      },
      {
        "lineNumber": 2397,
        "line": "   * @param data - The root data of the change event."
      },
      {
        "lineNumber": 2398,
        "line": "   * @param flags - The flags from this change event."
      },
      {
        "lineNumber": 2399,
        "line": "   *"
      },
      {
        "lineNumber": 2400,
        "line": "   * @return boolean - If component is valid or not."
      },
      {
        "lineNumber": 2401,
        "line": "   */"
      },
      {
        "lineNumber": 2402,
        "line": "  checkData(data, flags, row) {"
      }
    ],
    "codeParams": [
      "data",
      "flags",
      "row"
    ],
    "docParams": [
      "data",
      "flags"
    ]
  },
  {
    "name": "NestedComponent#getComponent",
    "filePath": "src/components/_classes/nested/NestedComponent.js",
    "lines": [
      {
        "lineNumber": 205,
        "line": "  /**"
      },
      {
        "lineNumber": 206,
        "line": "   * Returns a component provided a key. This performs a deep search within the"
      },
      {
        "lineNumber": 207,
        "line": "   * component tree."
      },
      {
        "lineNumber": 208,
        "line": "   *"
      },
      {
        "lineNumber": 209,
        "line": "   * @param {string} key - The key of the component to retrieve."
      },
      {
        "lineNumber": 210,
        "line": "   * @param {function} fn - Called with the component once found."
      },
      {
        "lineNumber": 211,
        "line": "   * @return {Object} - The component that is located."
      },
      {
        "lineNumber": 212,
        "line": "   */"
      },
      {
        "lineNumber": 213,
        "line": "  getComponent(path, fn) {"
      }
    ],
    "codeParams": [
      "path",
      "fn"
    ],
    "docParams": [
      "key",
      "fn"
    ]
  },
  {
    "name": "NestedComponent#createComponent",
    "filePath": "src/components/_classes/nested/NestedComponent.js",
    "lines": [
      {
        "lineNumber": 259,
        "line": "  /**"
      },
      {
        "lineNumber": 260,
        "line": "   * Create a new component and add it to the components array."
      },
      {
        "lineNumber": 261,
        "line": "   *"
      },
      {
        "lineNumber": 262,
        "line": "   * @param component"
      },
      {
        "lineNumber": 263,
        "line": "   * @param data"
      },
      {
        "lineNumber": 264,
        "line": "   */"
      },
      {
        "lineNumber": 265,
        "line": "  createComponent(component, options, data, before) {"
      }
    ],
    "codeParams": [
      "component",
      "options",
      "data",
      "before"
    ],
    "docParams": [
      "component",
      "data"
    ]
  },
  {
    "name": "NestedComponent#addComponents",
    "filePath": "src/components/_classes/nested/NestedComponent.js",
    "lines": [
      {
        "lineNumber": 314,
        "line": "  /**"
      },
      {
        "lineNumber": 315,
        "line": "   *"
      },
      {
        "lineNumber": 316,
        "line": "   * @param element"
      },
      {
        "lineNumber": 317,
        "line": "   * @param data"
      },
      {
        "lineNumber": 318,
        "line": "   */"
      },
      {
        "lineNumber": 319,
        "line": "  addComponents(data, options) {"
      }
    ],
    "codeParams": [
      "data",
      "options"
    ],
    "docParams": [
      "element",
      "data"
    ]
  },
  {
    "name": "NestedComponent#addComponent",
    "filePath": "src/components/_classes/nested/NestedComponent.js",
    "lines": [
      {
        "lineNumber": 331,
        "line": "  /**"
      },
      {
        "lineNumber": 332,
        "line": "   * Add a new component to the components array."
      },
      {
        "lineNumber": 333,
        "line": "   *"
      },
      {
        "lineNumber": 334,
        "line": "   * @param {Object} component - The component JSON schema to add."
      },
      {
        "lineNumber": 335,
        "line": "   * @param {Object} data - The submission data object to house the data for this component."
      },
      {
        "lineNumber": 336,
        "line": "   * @param {HTMLElement} before - A DOM element to insert this element before."
      },
      {
        "lineNumber": 337,
        "line": "   * @return {Component} - The created component instance."
      },
      {
        "lineNumber": 338,
        "line": "   */"
      },
      {
        "lineNumber": 339,
        "line": "  addComponent(component, data, before, noAdd) {"
      }
    ],
    "codeParams": [
      "component",
      "data",
      "before",
      "noAdd"
    ],
    "docParams": [
      "component",
      "data",
      "before"
    ]
  },
  {
    "name": "DataGridComponent#checkValidity",
    "filePath": "src/components/datagrid/DataGrid.js",
    "lines": [
      {
        "lineNumber": 404,
        "line": "  /**"
      },
      {
        "lineNumber": 405,
        "line": "   * Checks the validity of this datagrid."
      },
      {
        "lineNumber": 406,
        "line": "   *"
      },
      {
        "lineNumber": 407,
        "line": "   * @param data"
      },
      {
        "lineNumber": 408,
        "line": "   * @param dirty"
      },
      {
        "lineNumber": 409,
        "line": "   * @return {*}"
      },
      {
        "lineNumber": 410,
        "line": "   */"
      },
      {
        "lineNumber": 411,
        "line": "  checkValidity(data, dirty, row) {"
      }
    ],
    "codeParams": [
      "data",
      "dirty",
      "row"
    ],
    "docParams": [
      "data",
      "dirty"
    ]
  },
  {
    "name": "DataGridComponent#checkData",
    "filePath": "src/components/datagrid/DataGrid.js",
    "lines": [
      {
        "lineNumber": 427,
        "line": "  /**"
      },
      {
        "lineNumber": 428,
        "line": "   * Checks the data within each cell of the datagrid."
      },
      {
        "lineNumber": 429,
        "line": "   *"
      },
      {
        "lineNumber": 430,
        "line": "   * @param data"
      },
      {
        "lineNumber": 431,
        "line": "   * @param flags"
      },
      {
        "lineNumber": 432,
        "line": "   * @return {*}"
      },
      {
        "lineNumber": 433,
        "line": "   */"
      },
      {
        "lineNumber": 434,
        "line": "  checkData(data, flags, row) {"
      }
    ],
    "codeParams": [
      "data",
      "flags",
      "row"
    ],
    "docParams": [
      "data",
      "flags"
    ]
  },
  {
    "name": "DataGridComponent#checkRows",
    "filePath": "src/components/datagrid/DataGrid.js",
    "lines": [
      {
        "lineNumber": 441,
        "line": "  /**"
      },
      {
        "lineNumber": 442,
        "line": "   * Checks all rows within the datagrid."
      },
      {
        "lineNumber": 443,
        "line": "   *"
      },
      {
        "lineNumber": 444,
        "line": "   * @param method"
      },
      {
        "lineNumber": 445,
        "line": "   * @param data"
      },
      {
        "lineNumber": 446,
        "line": "   * @param opts"
      },
      {
        "lineNumber": 447,
        "line": "   * @return {*|boolean}"
      },
      {
        "lineNumber": 448,
        "line": "   */"
      },
      {
        "lineNumber": 449,
        "line": "  checkRows(method, data, opts, rowData) {"
      }
    ],
    "codeParams": [
      "method",
      "data",
      "opts",
      "rowData"
    ],
    "docParams": [
      "method",
      "data",
      "opts"
    ]
  },
  {
    "name": "DataGridComponent#checkRow",
    "filePath": "src/components/datagrid/DataGrid.js",
    "lines": [
      {
        "lineNumber": 456,
        "line": "  /**"
      },
      {
        "lineNumber": 457,
        "line": "   * Checks validity of each row according to a specific method."
      },
      {
        "lineNumber": 458,
        "line": "   *"
      },
      {
        "lineNumber": 459,
        "line": "   * @param method"
      },
      {
        "lineNumber": 460,
        "line": "   * @param rowData"
      },
      {
        "lineNumber": 461,
        "line": "   * @param row"
      },
      {
        "lineNumber": 462,
        "line": "   * @param opts"
      },
      {
        "lineNumber": 463,
        "line": "   * @return {boolean}"
      },
      {
        "lineNumber": 464,
        "line": "   */"
      },
      {
        "lineNumber": 465,
        "line": "  checkRow(method, data, rowData, row, opts) {"
      }
    ],
    "codeParams": [
      "method",
      "data",
      "rowData",
      "row",
      "opts"
    ],
    "docParams": [
      "method",
      "rowData",
      "row",
      "opts"
    ]
  },
  {
    "name": "SelectComponent#addOption",
    "filePath": "src/components/select/Select.js",
    "lines": [
      {
        "lineNumber": 164,
        "line": "  /**"
      },
      {
        "lineNumber": 165,
        "line": "   * Adds an option to the select dropdown."
      },
      {
        "lineNumber": 166,
        "line": "   *"
      },
      {
        "lineNumber": 167,
        "line": "   * @param value"
      },
      {
        "lineNumber": 168,
        "line": "   * @param label"
      },
      {
        "lineNumber": 169,
        "line": "   */"
      },
      {
        "lineNumber": 170,
        "line": "  addOption(value, label, attrs = {}, id) {"
      }
    ],
    "codeParams": [
      "value",
      "label",
      "attrs",
      "id"
    ],
    "docParams": [
      "value",
      "label"
    ]
  },
  {
    "name": "SelectComponent#addCurrentChoices",
    "filePath": "src/components/select/Select.js",
    "lines": [
      {
        "lineNumber": 946,
        "line": "  /**"
      },
      {
        "lineNumber": 947,
        "line": "   * @param {*} value"
      },
      {
        "lineNumber": 948,
        "line": "   * @param {Array} items"
      },
      {
        "lineNumber": 949,
        "line": "   */"
      },
      {
        "lineNumber": 950,
        "line": "  addCurrentChoices(values, items, keyValue) {"
      }
    ],
    "codeParams": [
      "values",
      "items",
      "keyValue"
    ],
    "docParams": [
      "value",
      "items"
    ]
  },
  {
    "name": "TextAreaComponent#updateEditorValue",
    "filePath": "src/components/textarea/TextArea.js",
    "lines": [
      {
        "lineNumber": 88,
        "line": "  /**"
      },
      {
        "lineNumber": 89,
        "line": "   * Updates the editor value."
      },
      {
        "lineNumber": 90,
        "line": "   *"
      },
      {
        "lineNumber": 91,
        "line": "   * @param newValue"
      },
      {
        "lineNumber": 92,
        "line": "   */"
      },
      {
        "lineNumber": 93,
        "line": "  updateEditorValue(index, newValue) {"
      }
    ],
    "codeParams": [
      "index",
      "newValue"
    ],
    "docParams": [
      "newValue"
    ]
  },
  {
    "name": "checkInvalidDate",
    "filePath": "src/utils/calendarUtils.js",
    "lines": [
      {
        "lineNumber": 71,
        "line": "/**"
      },
      {
        "lineNumber": 72,
        "line": " * Checks the entered date for validity."
      },
      {
        "lineNumber": 73,
        "line": " *"
      },
      {
        "lineNumber": 74,
        "line": " * @param {String} value"
      },
      {
        "lineNumber": 75,
        "line": " *   The value to check."
      },
      {
        "lineNumber": 76,
        "line": " * @param {[String]} format"
      },
      {
        "lineNumber": 77,
        "line": " *   A moment formats."
      },
      {
        "lineNumber": 78,
        "line": " * @param {Date} maxDate"
      },
      {
        "lineNumber": 79,
        "line": " *   The max date."
      },
      {
        "lineNumber": 80,
        "line": " * @param {Date} minDate"
      },
      {
        "lineNumber": 81,
        "line": " *   The min date."
      },
      {
        "lineNumber": 82,
        "line": " * * @return {{message: string, result: boolean}}"
      },
      {
        "lineNumber": 83,
        "line": " */"
      },
      {
        "lineNumber": 84,
        "line": "export function checkInvalidDate(value, format, minDate, maxDate) {"
      }
    ],
    "codeParams": [
      "value",
      "format",
      "minDate",
      "maxDate"
    ],
    "docParams": [
      "value",
      "format",
      "maxDate",
      "minDate"
    ]
  },
  {
    "name": "getComponent",
    "filePath": "src/utils/formUtils.js",
    "lines": [
      {
        "lineNumber": 137,
        "line": "/**"
      },
      {
        "lineNumber": 138,
        "line": " * Get a component by its key"
      },
      {
        "lineNumber": 139,
        "line": " *"
      },
      {
        "lineNumber": 140,
        "line": " * @param {Object} components"
      },
      {
        "lineNumber": 141,
        "line": " *   The components to iterate."
      },
      {
        "lineNumber": 142,
        "line": " * @param {String|Object} key"
      },
      {
        "lineNumber": 143,
        "line": " *   The key of the component to get, or a query of the component to search."
      },
      {
        "lineNumber": 144,
        "line": " *"
      },
      {
        "lineNumber": 145,
        "line": " * @returns {Object}"
      },
      {
        "lineNumber": 146,
        "line": " *   The component that matches the given key, or undefined if not found."
      },
      {
        "lineNumber": 147,
        "line": " */"
      },
      {
        "lineNumber": 148,
        "line": "export function getComponent(components, key, includeAll) {"
      }
    ],
    "codeParams": [
      "components",
      "key",
      "includeAll"
    ],
    "docParams": [
      "components",
      "key"
    ]
  },
  {
    "name": "findComponent",
    "filePath": "src/utils/formUtils.js",
    "lines": [
      {
        "lineNumber": 190,
        "line": "/**"
      },
      {
        "lineNumber": 191,
        "line": " * This function will find a component in a form and return the component AND THE PATH to the component in the form."
      },
      {
        "lineNumber": 192,
        "line": " *"
      },
      {
        "lineNumber": 193,
        "line": " * @param components"
      },
      {
        "lineNumber": 194,
        "line": " * @param key"
      },
      {
        "lineNumber": 195,
        "line": " * @param fn"
      },
      {
        "lineNumber": 196,
        "line": " * @param path"
      },
      {
        "lineNumber": 197,
        "line": " * @returns {*}"
      },
      {
        "lineNumber": 198,
        "line": " */"
      },
      {
        "lineNumber": 199,
        "line": "export function findComponent(components, key, path, fn) {"
      }
    ],
    "codeParams": [
      "components",
      "key",
      "path",
      "fn"
    ],
    "docParams": [
      "components",
      "key",
      "fn",
      "path"
    ]
  },
  {
    "name": "evaluate",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 42,
        "line": "/**"
      },
      {
        "lineNumber": 43,
        "line": " * Evaluate a method."
      },
      {
        "lineNumber": 44,
        "line": " *"
      },
      {
        "lineNumber": 45,
        "line": " * @param func"
      },
      {
        "lineNumber": 46,
        "line": " * @param args"
      },
      {
        "lineNumber": 47,
        "line": " * @return {*}"
      },
      {
        "lineNumber": 48,
        "line": " */"
      },
      {
        "lineNumber": 49,
        "line": "export function evaluate(func, args, ret, tokenize) {"
      }
    ],
    "codeParams": [
      "func",
      "args",
      "ret",
      "tokenize"
    ],
    "docParams": [
      "func",
      "args"
    ]
  },
  {
    "name": "checkCalculated",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 174,
        "line": "/**"
      },
      {
        "lineNumber": 175,
        "line": " * Checks the calculated value for a provided component and data."
      },
      {
        "lineNumber": 176,
        "line": " *"
      },
      {
        "lineNumber": 177,
        "line": " * @param {Object} component"
      },
      {
        "lineNumber": 178,
        "line": " *   The component to check for the calculated value."
      },
      {
        "lineNumber": 179,
        "line": " * @param {Object} submission"
      },
      {
        "lineNumber": 180,
        "line": " *   A submission object."
      },
      {
        "lineNumber": 181,
        "line": " * @param data"
      },
      {
        "lineNumber": 182,
        "line": " *   The full submission data."
      },
      {
        "lineNumber": 183,
        "line": " */"
      },
      {
        "lineNumber": 184,
        "line": "export function checkCalculated(component, submission, rowData) {"
      }
    ],
    "codeParams": [
      "component",
      "submission",
      "rowData"
    ],
    "docParams": [
      "component",
      "submission",
      "data"
    ]
  },
  {
    "name": "checkSimpleConditional",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 197,
        "line": "/**"
      },
      {
        "lineNumber": 198,
        "line": " * Check if a simple conditional evaluates to true."
      },
      {
        "lineNumber": 199,
        "line": " *"
      },
      {
        "lineNumber": 200,
        "line": " * @param condition"
      },
      {
        "lineNumber": 201,
        "line": " * @param condition"
      },
      {
        "lineNumber": 202,
        "line": " * @param row"
      },
      {
        "lineNumber": 203,
        "line": " * @param data"
      },
      {
        "lineNumber": 204,
        "line": " * @returns {boolean}"
      },
      {
        "lineNumber": 205,
        "line": " */"
      },
      {
        "lineNumber": 206,
        "line": "export function checkSimpleConditional(component, condition, row, data) {"
      }
    ],
    "codeParams": [
      "component",
      "condition",
      "row",
      "data"
    ],
    "docParams": [
      "condition",
      "condition",
      "row",
      "data"
    ]
  },
  {
    "name": "checkCustomConditional",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 234,
        "line": "/**"
      },
      {
        "lineNumber": 235,
        "line": " * Check custom javascript conditional."
      },
      {
        "lineNumber": 236,
        "line": " *"
      },
      {
        "lineNumber": 237,
        "line": " * @param component"
      },
      {
        "lineNumber": 238,
        "line": " * @param custom"
      },
      {
        "lineNumber": 239,
        "line": " * @param row"
      },
      {
        "lineNumber": 240,
        "line": " * @param data"
      },
      {
        "lineNumber": 241,
        "line": " * @returns {*}"
      },
      {
        "lineNumber": 242,
        "line": " */"
      },
      {
        "lineNumber": 243,
        "line": "export function checkCustomConditional(component, custom, row, data, form, variable, onError, instance) {"
      }
    ],
    "codeParams": [
      "component",
      "custom",
      "row",
      "data",
      "form",
      "variable",
      "onError",
      "instance"
    ],
    "docParams": [
      "component",
      "custom",
      "row",
      "data"
    ]
  },
  {
    "name": "checkCondition",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 271,
        "line": "/**"
      },
      {
        "lineNumber": 272,
        "line": " * Checks the conditions for a provided component and data."
      },
      {
        "lineNumber": 273,
        "line": " *"
      },
      {
        "lineNumber": 274,
        "line": " * @param component"
      },
      {
        "lineNumber": 275,
        "line": " *   The component to check for the condition."
      },
      {
        "lineNumber": 276,
        "line": " * @param row"
      },
      {
        "lineNumber": 277,
        "line": " *   The data within a row"
      },
      {
        "lineNumber": 278,
        "line": " * @param data"
      },
      {
        "lineNumber": 279,
        "line": " *   The full submission data."
      },
      {
        "lineNumber": 280,
        "line": " *"
      },
      {
        "lineNumber": 281,
        "line": " * @returns {boolean}"
      },
      {
        "lineNumber": 282,
        "line": " */"
      },
      {
        "lineNumber": 283,
        "line": "export function checkCondition(component, row, data, form, instance) {"
      }
    ],
    "codeParams": [
      "component",
      "row",
      "data",
      "form",
      "instance"
    ],
    "docParams": [
      "component",
      "row",
      "data"
    ]
  },
  {
    "name": "checkTrigger",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 298,
        "line": "/**"
      },
      {
        "lineNumber": 299,
        "line": " * Test a trigger on a component."
      },
      {
        "lineNumber": 300,
        "line": " *"
      },
      {
        "lineNumber": 301,
        "line": " * @param component"
      },
      {
        "lineNumber": 302,
        "line": " * @param action"
      },
      {
        "lineNumber": 303,
        "line": " * @param data"
      },
      {
        "lineNumber": 304,
        "line": " * @param row"
      },
      {
        "lineNumber": 305,
        "line": " * @returns {mixed}"
      },
      {
        "lineNumber": 306,
        "line": " */"
      },
      {
        "lineNumber": 307,
        "line": "export function checkTrigger(component, trigger, row, data, form, instance) {"
      }
    ],
    "codeParams": [
      "component",
      "trigger",
      "row",
      "data",
      "form",
      "instance"
    ],
    "docParams": [
      "component",
      "action",
      "data",
      "row"
    ]
  },
  {
    "name": "delay",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 874,
        "line": "/**"
      },
      {
        "lineNumber": 875,
        "line": " * Delays function execution with possibility to execute function synchronously or cancel it."
      },
      {
        "lineNumber": 876,
        "line": " *"
      },
      {
        "lineNumber": 877,
        "line": " * @param fn Function to delay"
      },
      {
        "lineNumber": 878,
        "line": " * @param delay Delay time"
      },
      {
        "lineNumber": 879,
        "line": " * @return {*}"
      },
      {
        "lineNumber": 880,
        "line": " */"
      },
      {
        "lineNumber": 881,
        "line": "export function delay(fn, delay = 0, ...args) {"
      }
    ],
    "codeParams": [
      "fn",
      "delay",
      "args"
    ],
    "docParams": [
      "fn",
      "delay"
    ]
  },
  {
    "name": "unfold",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 948,
        "line": "/**"
      },
      {
        "lineNumber": 949,
        "line": " * Retrun provided argument."
      },
      {
        "lineNumber": 950,
        "line": " * If argument is a function, returns the result of a function call."
      },
      {
        "lineNumber": 951,
        "line": " * @param {*} e;"
      },
      {
        "lineNumber": 952,
        "line": " *"
      },
      {
        "lineNumber": 953,
        "line": " * @return {*}"
      },
      {
        "lineNumber": 954,
        "line": " */"
      },
      {
        "lineNumber": 955,
        "line": "export function unfold(e) {"
      }
    ],
    "codeParams": [
      "e"
    ],
    "docParams": [
      "e;"
    ]
  },
  {
    "name": "sanitize",
    "filePath": "src/utils/utils.js",
    "lines": [
      {
        "lineNumber": 1038,
        "line": "/**"
      },
      {
        "lineNumber": 1039,
        "line": " * Sanitize an html string."
      },
      {
        "lineNumber": 1040,
        "line": " *"
      },
      {
        "lineNumber": 1041,
        "line": " * @param string"
      },
      {
        "lineNumber": 1042,
        "line": " * @returns {*}"
      },
      {
        "lineNumber": 1043,
        "line": " */"
      },
      {
        "lineNumber": 1044,
        "line": "export function sanitize(string, options) {"
      }
    ],
    "codeParams": [
      "string",
      "options"
    ],
    "docParams": [
      "string"
    ]
  }
]